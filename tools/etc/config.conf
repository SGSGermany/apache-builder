#
# Quadlet Systemd container unit
#
# Name of the Quadlet Systemd container unit to create and run the Apache
# container (without the `.container` or `.service` suffix).
#
# If empty or unset, defaults to `"$CONTAINER"`, which in turn defaults to
# `"$IMAGE"`. The latter has complex logic to determine its default value
# (refer to `$BUILDER_CONFIG/container.conf` and `$BUILDER_CONFIG/image.conf`).
# You typically don't want to set `$UNIT` and `$CONTAINER` manually; check
# `$IMAGE` instead.
#

UNIT=""

#
# Quadlet Systemd container unit template
#
# Path to a template file to create the Quadlet Systemd container unit from
# (i.e., a `.container` file, see podman-systemd.unit(5)). `apache-builder`
# will append dynamic config to either an existing `[Container]` section or
# add one if it doesn't exist.
#
# You can use `$CONFIG`, `$CONFIG_DIR`, `$DATA_DIR`, and `$LIB_DIR` to specify
# a path. If empty or unset, we attempt the following default locations:
# - `"$CONFIG_DIR/$CONFIG.container"` (if invoked with `--config`)
# - `"$CONFIG_DIR/apache.container"`
# - `"$LIB_DIR/default-apache.container"`
#

UNIT_TEMPLATE=""

#
# Systemd service manager
#
# Specify which Systemd service manager to use. Set this to `"root"` to use
# the system's service manager (like `systemctl --system`). To use an
# unprivileged user's service manager (like `systemctl --user`), specify
# the user's name or UID.
#
# Note: The configured user must match the running user, another active user,
# a lingering user, or root; otherwise, `systemctl` will fail. If you configure
# a user different from the running user, you must run `apache-builder` as
# root. See the `$BUILDER_USER` config below for more details.
#
# In practice there are just two reasonable setups:
# 1. Run `apache-builder` with an unprivileged user and leave both
#    `$UNIT_MANAGER` and `$BUILDER_USER` empty.
# 2. Run `apache-builder` as root, enabling configuration of arbitrary users
#    for `$UNIT_MANAGER` and `$BUILDER_USER`. You can configure the same or
#    different users. Typically, you'd use different unprivileged users.
#
# If empty or unset, defaults to the running user.
#

UNIT_MANAGER=""

#
# Enable Systemd unit
#
# Set a boolean true value (`"1"`, `"y"`, `"yes"`, or `"true"`) to enable the
# Systemd unit, or set any other value to disable it.
#
# If empty or unset, defaults to `"no"`.
#

UNIT_ENABLED=""

#
# Builder user
#
# The name of the user to run the builder container.
#
# If empty or unset, defaults to the running user. If you configure a user
# different from the running user, you must run `apache-builder` as root.
# If running as root, configure an unprivileged user here.
#

BUILDER_USER=""

#
# Builder image
#
# The source of the builder image used to build the Apache image. Use Podman's
# `transport:path` format (refer to podman-run(1)).
#
# If empty or unset, defaults to `"ghcr.io/sgsgermany/apache-builder:latest"`.
#

BUILDER_IMAGE=""

#
# Builder container name
#
# The name of the container used to build the Apache image.
#
# If empty or unset, defaults to `"$IMAGE-builder"`. Note that
# `$IMAGE` has complex logic to determine its default value
# (refer to `$BUILDER_CONFIG/image.conf`). You typically don't
# want to set this manually; check `$IMAGE` instead.
#

BUILDER_CONTAINER=""

#
# Builder config path
#
# Reads the builder's configuration from this directory. `apache-builder`
# will mount this directory into the builder container and use the config
# files there (namely `image.conf`, `container.conf`, and `apache.conf`,
# loaded in this exact order) to build Apache. If the directory doesn't
# exist, `apache-builder` will create it.
#
# You can use `$CONFIG`, `$CONFIG_DIR`, `$DATA_DIR`, and `$LIB_DIR` to specify
# a path. If empty or unset, the default depends on whether you've invoked
# `apache-builder` with `--config`. If invoked with `--config`, defaults to
# `"$DATA_DIR/$CONFIG"`. If invoked without, defaults to `"$DATA_DIR/config"`.
#

BUILDER_CONFIG=""

#
# OCI archive path
#
# Path to store the built Apache images in OCI archive format (refer to
# podman-save(1)). `apache-builder` will create a directory structure like
# `$ARCHIVES_PATH/$IMAGE/$TAG` below this path. If the directory doesn't
# exist, `apache-builder` will create it.
#
# You can use `$CONFIG`, `$CONFIG_DIR`, `$DATA_DIR`, and `$LIB_DIR` to specify
# a path. If empty or unset, defaults to `"$DATA_DIR/archives"`.
#

ARCHIVES_PATH=""

#
# Enable management of /etc/subuid and /etc/subgid
#
# Set a boolean true value (`"1"`, `"y"`, `"yes"`, or `"true"`) to enable
# `apache-builder` to update `/etc/subuid` and `/etc/subgid` for the
# `$CONTAINER_USERNS` (see `$BUILDER_CONFIG/container.conf`) user (if running
# with `UNIT_MANAGER="root"`), or the `$UNIT_MANAGER` user at runtime to
# dynamically add mappings for all required users (e.g., for site owners).
# Note that you must manually add the base user namespace with exactly
# 65,536 Sub-IDs to both `/etc/subuid` and `/etc/subgid`.
#
# If enabled, you must run `apache-builder` as root. If the container is
# running as root (i.e., `$UNIT_MANAGER="root"`), you can leave this disabled,
# since rootful containers use direct mappings between host and container IDs.
# However, if enabled, `apache-builder subids` will still update `/etc/subuid`
# and `/etc/subgid` for the `$CONTAINER_USERNS` user. Any additional entries
# can be configured with `$STATIC_SUBUIDS` and `$STATIC_SUBGIDS`.
#
# See subuid(5) for details. All entries are created for the `$UNIT_MANAGER`
# user. Note that `apache-builder` can't remove mappings if `$UNIT_MANAGER` is
# changed later.
#
# If empty or unset, defaults to `"no"`.
#

MANAGE_SUBIDS=""

#
# Static /etc/subuid entries
#
# Configure static entries to add to `/etc/subuid` when `$MANAGE_SUBIDS` is
# enabled. Subordinate users can be specified by name, ID, or an ID followed
# by a colon (`:`) and the number of subordinate users.
#
# If empty or unset, no static subordinate users are added.
#

STATIC_SUBUIDS=()

#
# Static /etc/subgid entries
#
# Configure static entries to add to `/etc/subgid` when `$MANAGE_SUBIDS` is
# enabled. Subordinate groups can be specified by name, ID, or an ID followed
# by a colon (`:`) and the number of subordinate groups.
#
# If empty or unset, no static subordinate groups are added.
#

STATIC_SUBGIDS=()

#
# Enable auto updates
#
# Set a boolean true value (`"1"`, `"y"`, `"yes"`, or `"true"`) to enable
# auto updates, or set any other value to disable them.
#
# If empty or unset, defaults to `"no"`.
#

AUTO_UPDATE=""

#
# Automatically start Apache
#
# Set a boolean true value (`"1"`, `"y"`, `"yes"`, or `"true"`) to start Apache
# automatically when running `apache-builder auto-update`, or set any other
# value to disable auto updates. Note that this has no effect unless both
# `UNIT_ENABLED="yes"` and `AUTO_UPDATE="yes"` are set.
#
# If empty or unset, defaults to `"no"`.
#

AUTO_START=""

