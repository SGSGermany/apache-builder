#!/bin/bash
# apache-builder
# A container to build Apache containers.
#
# Copyright (c) 2021  SGS Serious Gaming & Simulations GmbH
#
# This work is licensed under the terms of the MIT license.
# For a copy, see LICENSE file or <https://opensource.org/licenses/MIT>.
#
# SPDX-License-Identifier: MIT
# License-Filename: LICENSE

set -eu -o pipefail
export LC_ALL=C
shopt -s nullglob

APP_NAME="$(basename "${BASH_SOURCE[0]}")"
LIB_DIR="/usr/local/lib/apache-builder"
CONFIG_DIR="/etc/apache-builder"

print_usage() {
    echo "Usage:"
    echo "  $APP_NAME [--config CONFIG] ACTION"
}

print_help() {
    print_usage
    echo
    echo "Actions:"
    echo "  build          Builds the image."
    echo "  import         Imports the built image into the Podman storage."
    echo "  exists         Checks whether the image is in the Podman storage."
    echo "  check-updates  Checks whether an image update is available."
    echo "  update         Runs 'build', 'import', and 'create-unit'."
    echo "  auto-update    Checks for updates and runs 'clean' and 'update', if necessary."
    echo "  clean          Deletes unused images."
    echo "  create-unit    Creates a Systemd service unit for the container."
    echo "  unit-start     Starts the Systemd service."
    echo "  unit-stop      Stops the Systemd service."
    echo "  unit-kill      Sends SIGKILL signal to the Systemd service."
    echo "  unit-restart   Restarts the Systemd service."
    echo "  unit-status    Prints status info about the Systemd service."
    echo "  unit-enable    Enables the Systemd service."
    echo "  unit-disable   Disables the Systemd service."
    echo "  help           Prints this usage info and exits."
}

# read parameters
CONFIG_FILE="config.env"
ACTION=""

while [ $# -gt 0 ]; do
    if [ "$1" == "--help" ]; then
        print_help
        exit
    elif [ "$1" == "--config" ] || [ "$1" == "-c" ]; then
        if [ -z "${2:-}" ]; then
            echo "Missing required argument 'CONFIG' for option '--config'" >&2
            exit 1
        fi

        CONFIG_FILE="$2"
        shift 2
    elif [ "${1:0:1}" == "-" ]; then
        echo "Unknown option: $1" >&2
        exit 1
    elif [ -z "$ACTION" ]; then
        if [ "$1" == "help" ]; then
            print_help
            exit
        fi

        ACTION="$1"
        shift
    else
        echo "Unknown argument: $1" >&2
        exit 1
    fi
done

if [ -z "$ACTION" ]; then
    echo "Missing required argument 'ACTION'" >&2
    echo >&2
    print_usage >&2
    exit 1
fi

# source helper functions
source "$LIB_DIR/helper.sh.inc"

# source config file
if [ "${CONFIG_FILE:0:1}" != "/" ]; then
    CONFIG_FILE="$CONFIG_DIR/$CONFIG_FILE"
fi

if [ ! -e "$CONFIG_FILE" ]; then
    echo "Invalid config file '$CONFIG_FILE': No such file or directory" >&2
    exit 1
elif [ ! -f "$CONFIG_FILE" ]; then
    echo "Invalid config file '$CONFIG_FILE': Not a file" >&2
    exit 1
elif [ ! -r "$CONFIG_FILE" ]; then
    echo "Invalid config file '$CONFIG_FILE': Permission denied" >&2
    exit 1
fi

source "$CONFIG_FILE"

if [ -z "${IMAGE:-}" ]; then
    echo "Invalid config file '$CONFIG_FILE': Missing required config variable 'IMAGE'" >&2
    exit 1
elif [ -z "${UNIT_TEMPLATE:-}" ]; then
    echo "Invalid config file '$CONFIG_FILE': Missing required config variable 'UNIT_TEMPLATE'" >&2
    exit 1
elif [ -z "${BUILDER_IMAGE:-}" ]; then
    echo "Invalid config file '$CONFIG_FILE': Missing required config variable 'BUILDER_IMAGE'" >&2
    exit 1
elif [ -z "${CONFIG_PATH:-}" ]; then
    echo "Invalid config file '$CONFIG_FILE': Missing required config variable 'CONFIG_PATH'" >&2
    exit 1
elif [ -z "${ARCHIVES_PATH:-}" ]; then
    echo "Invalid config file '$CONFIG_FILE': Missing required config variable 'ARCHIVES_PATH'" >&2
    exit 1
fi

# set default config values
[[ "$IMAGE" == *:* ]] || [[ "$IMAGE" == *@* ]] || IMAGE="$IMAGE:latest"
[ -n "${CONTAINER:-}" ] || CONTAINER="$(basename "$IMAGE" | cut -d ':' -f 1 | cut -d '@' -f 1)"
[ -n "${UNIT:-}" ] || UNIT="container-$CONTAINER.service"
[ -n "${BUILDER_USER:-}" ] || BUILDER_USER="$(id -un)"
[ -n "${BUILDER_CONTAINER:-}" ] || BUILDER_CONTAINER="$(basename "$BUILDER_IMAGE" | cut -d ':' -f 1 | cut -d '@' -f 1)"

# call action
if [ ! -e "$LIB_DIR/$ACTION.sh" ]; then
    echo "Invalid action '$ACTION': Action not found" >&2
    exit 1
elif [ ! -f "$LIB_DIR/$ACTION.sh" ] || [ ! -r "$LIB_DIR/$ACTION.sh" ]; then
    echo "Invalid action '$ACTION': Action is invalid" >&2
    exit 1
fi

source "$LIB_DIR/$ACTION.sh"

action_info
action_exec "$@"
