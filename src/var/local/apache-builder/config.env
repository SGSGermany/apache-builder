#
# Virtual Hosts
#
# The '$SITES' array requires the following fields (separated by 2+ spaces):
# - Virtual Host: FQDN (e.g. 'sub.example.com')
# - Mode: Choose 'htdocs' (serving files from '/var/www/<virtual host>'),
#         'proxy', or 'redirect' (you must add an URL to '$SITE_URLS')
# - Owner: Owner of this virtual host (username)
# - SSL: Whether SSL should be used ('yes' or 'no')
# - PHP-FPM: Whether PHP should be enabled ('yes' or 'no')
#

SITES=(
    # Virtual Host  # Mode  # Owner  # SSL  # PHP-FPM
)

#
# Virtual Host aliases
#
# The '$SITES_ALIASES' array requires the following fields:
# - Virtual Host: FQDN (must match the '$SITES' array)
# - Aliases: Space separated list of alias FQDNs
#

SITES_ALIASES=(
    # Virtual Host  # Aliases ...
)

#
# Virtual Host URLs
#
# The '$SITES_URLS' array requires the following fields:
# - Virtual Host: FQDN (must match the '$SITES' array)
# - URL: The URL users should be redirected to (mode 'redirect'),
#        or the URL that is proxied (mode 'proxy')
#

SITES_URLS=(
    # Virtual Host  # URL
)

#
# Default Virtual Host
#
# If the requested host is not known to Apache, Apache will serve the default
# virtual host as fallback. This default virtual host is no regular virtual
# host and is limited in its abilities on purpose.
#
# Use the '$DEFAULT_SITE_MODE' variable to switch mode for the default virtual
# host, either 'htdocs' (serving files from '/var/www/default'), or 'redirect'
# (set the URL to redirect to using the '$DEFAULT_SITE_URL' config).
#
# Set '$DEFAULT_SITE_SSL' to enable (set to 'yes') or disable (set to 'no')
# HTTPS support for the default virtual host. Even though the certificate will
# most certainly be considered invalid due to the (expected) hostname mismatch,
# it allows you to have control over the certificate being presented.
#
# Also note that the default virtual host doesn't support PHP.
#

DEFAULT_SITE_MODE="htdocs"
DEFAULT_SITE_URL=""
DEFAULT_SITE_SSL="yes"

#
# Virtual host httpdocs paths on the host system
#
# To specify a virtual host's httpdocs directory on the host system, you can
# either set the path in the '$HOST_HTDOCS_PATHS' array manually, or evaluate
# the '$HOST_HTDOCS_PATH_PATTERN' path pattern. A manually set path always
# takes precedence over a pattern.
#
# The '$HOST_HTDOCS_PATH_PATTERN' path pattern supports the placeholder
# variables '${SITE}' and '${SITE_OWNER}'.
#
# The '$HOST_HTDOCS_PATHS' array requires the following fields:
# - Virtual Host: FQDN (must match the '$SITES' array)
# - Path: The absolute path on the host to mount inside the container
#
# To specify the default httpdocs path, use the '$HOST_DEFAULT_HTDOCS_PATH'
# variable.
#

HOST_HTDOCS_PATH_PATTERN="/var/www/\${SITE}"
HOST_HTDOCS_PATHS=(
    # Virtual Host  # Path
)

HOST_DEFAULT_HTDOCS_PATH="/var/www/html"

#
# Virtual host logs paths on the host system
#
# To specify a virtual host's logs directory on the host system, you can either
# set the path in the '$HOST_LOGS_PATHS' array manually, or evaluate the
# '$HOST_LOGS_PATH_PATTERN' path pattern. To learn about how to use them,
# please refer to the usage of the matching '$HOST_HTDOCS_PATHS' and
# '$HOST_HTDOCS_PATH_PATTERN' settings above.
#
# To specify the default logs path, use the '$HOST_DEFAULT_LOGS_PATH' variable.
#

HOST_LOGS_PATH_PATTERN="/var/log/apache2/\${SITE}"
HOST_LOGS_PATHS=(
    # Virtual Host  # Path
)

HOST_DEFAULT_LOGS_PATH="/var/log/apache2"

#
# Virtual host SSL cert/key paths on the host system
#
# To specify a virtual host's SSL cert/key directory on the host system, you
# can either set the path in the '$HOST_LOGS_PATHS' array manually, or evaluate
# the '$HOST_LOGS_PATH_PATTERN' path pattern. To learn about how to use them,
# please refer to the usage of the matching '$HOST_HTDOCS_PATHS' and
# '$HOST_HTDOCS_PATH_PATTERN' settings above.
#
# To specify the path to the SSL cert/key directory of the default virtual
# host, use the '$HOST_DEFAULT_SSL_PATH' variable.
#

HOST_SSL_PATH_PATTERN="/var/local/acme/live/\${SITE}"
HOST_SSL_PATHS=(
    # Virtual Host  # Path
)

HOST_DEFAULT_SSL_PATH="/var/local/acme/live/default"

#
# Virtual host php-fpm socket directory on the host system
#
# To specify a virtual host's php-fpm socket directory on the host system, you
# can either set the path in the '$HOST_PHP_FPM_PATHS' array manually, or
# evaluate the '$HOST_PHP_FPM_PATH_PATTERN' path pattern. To learn about how
# to use them, please refer to the usage of the matching '$HOST_HTDOCS_PATHS'
# and '$HOST_HTDOCS_PATH_PATTERN' settings above.
#

HOST_PHP_FPM_PATH_PATTERN="/run/php-fpm/\${SITE}"
HOST_PHP_FPM_PATHS=(
    # Virtual Host  # Path
)

#
# ACME challenges path on the host system
#
# Specify the absolute path to the ACME challenges directory on the host.
#

HOST_ACME_CHALLENGES_PATH="/var/local/acme/challenges"

#
# Primary user namespace on the host
#
# The Apache container requires rootful networking, but otherwise drops its
# privileges by running in a user namespace. Specify the name of the user
# whose namespace should be used.
#

HOST_USERNS="apache2"

#
# User ID mappings
#
# For security reasons one should always create a user per virtual host on the
# host system and let this user own all files (httpdocs, logs, â€¦). To proberly
# map the users between host and container we must know the respective user
# ID on the host system for any virtual host owner (see  '$SITES' array above).
#
# The '$HOST_UID_MAP' array requires the following fields:
# - Container user: Name of the owning user (must match the '$SITES' array)
# - Host UID: The matching user's ID on the host system
#
# Additionally the following users must be specified:
# - apache2 (usually the same as the '$HOST_USERNS' user)
# - acme
# - php-sock
#

HOST_UID_MAP=(
    # Container user  # Host UID
    "apache2          "
    "acme             "
    "php-sock         "
)

#
# Group ID mappings
#
# Mapping of group IDs between host system and container. To learn about how to
# use this config, please refer to the usage of the '$HOST_UID_MAP' setting
# above.
#

HOST_GID_MAP=(
    # Container group  # Host GID
    "apache2          "
    "acme             "
    "php-sock         "
)

#
# Apache modules
#
# Specify a list of Apache modules to enable. Please note that some modules
# are required for Apache to work as expected, thus you should always include
# the following base modules.
#

APACHE_MODULES=(
    # base modules
    "mpm_event"
    "authn_file"
    "authn_core"
    "authz_host"
    "authz_groupfile"
    "authz_user"
    "authz_core"
    "auth_basic"
    "reqtimeout"
    "mime"
    "log_config"
    "headers"
    "http2"
    "rewrite"
    "setenvif"
    "unixd"
    "autoindex"
    "dir"
    "alias"

    # additional base modules
    "ssl"
    "socache_shmcb"
    "proxy"
    "proxy_fcgi"
)

#
# Apache configs
#
# Specify a list of Apache configs to enable. Please note that some configs are
# required for Apache to work as expected, thus you should always include the
# following base configs.
#

APACHE_CONFIGS=(
    # base configs
    "charset"
    "connection"
    "errors"
    "htaccess"
    "lookups"
    "security"
    "ssl"
    "ssl-ocsp-stapling"
    "ssl-security"

    # additional base configs
    "acme-challenge"
)

#
# Container name
#
# Set the container name for the generated Systemd service unit.
#

CONTAINER_NAME="apache"

#
# Container network
#
# Set the container network for the generated Systemd service unit. Refer to
# podman-run(1) and check the '--network' option for usage info. Leave this
# empty to use Podman's default network.
#

CONTAINER_NETWORK=""

#
# Container hostname
#
# Set the container's default hostname. Refer to podman-run(1) and check the
# '--hostname' option for usage info. Leave this empty to use a random hostname
# generated by Podman. Please mind that HTTP requests using the container's
# default hostname will always be served using Apache's default virtual host,
# i.e. don't use the name of a virtual host in the '$SITES' array above.
#

CONTAINER_HOSTNAME=""

#
# Container ports to publish
#
# Specify a list of ports, or ranges of ports, of the container to publish to
# the host. Refer to podman-run(1) and check the '--publish' option for usage
# info.
#

CONTAINER_PUBLISH_PORTS=(
    "80:80/tcp"
    "443:443/tcp"
)
